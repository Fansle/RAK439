<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\RAK439.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\RAK439.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Dec 28 13:58:52 2016
<BR><P>
<H3>Maximum Stack Usage =        968 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; rw_sysDriverLoop &rArr; _loop_connect &rArr; _dns_conn &rArr; dnsreq_send &rArr; sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[e7]">MaskSPIInterrupts</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[eb]">Hcd_UnmaskSPIInterrupts</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[47]">Custom_FreeRxRequest</a> from cust_driver_main.o(i.Custom_FreeRxRequest) referenced from cust_driver_main.o(i.Custom_GetRxRequest)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[34]">DMA2_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[48]">Driver_RxComplete</a> from driver_txrx.o(i.Driver_RxComplete) referenced from driver_main.o(i.Driver_RxReady)
 <LI><a href="#[49]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequest)
 <LI><a href="#[49]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3f]">I2C3_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3e]">I2C3_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[39]">OTG_FS_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[31]">SDIO_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[41]">SPI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[42]">SPI5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[32]">TIM5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3d]">USART6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[4d]">_deinit_interface</a> from rw_lib_platform.o(i._deinit_interface) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[52]">_ext_interrupt</a> from rw_lib_platform.o(i._ext_interrupt) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[4c]">_init_interface</a> from rw_lib_platform.o(i._init_interface) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[4e]">_power_up_down</a> from rw_lib_platform.o(i._power_up_down) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[4f]">_spi_io_buffer</a> from rw_lib_platform.o(i._spi_io_buffer) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[4b]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[56]">connect_callback</a> from rw_lib_platform.o(i.connect_callback) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[55]">customer_assert</a> from rw_lib_platform.o(i.customer_assert) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[50]">delay_ms</a> from rw_lib_platform.o(i.delay_ms) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[59]">dns_ipcallback</a> from rw_lib_platform.o(i.dns_ipcallback) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[4a]">fputc</a> from bsp.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[51]">get_stamp</a> from rw_lib_platform.o(i.get_stamp) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[58]">ip_callback</a> from rw_lib_platform.o(i.ip_callback) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[43]">main</a> from tcpudp_test.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[54]">pvPortMalloc</a> from lib_mem.o(i.pvPortMalloc) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[46]">query_credit_deficit</a> from api_txrx.o(i.query_credit_deficit) referenced from api_txrx.o(i.Api_TxGetStatus)
 <LI><a href="#[57]">scan_callback</a> from rw_lib_platform.o(i.scan_callback) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[53]">vPortFree</a> from lib_mem.o(i.vPortFree) referenced from rw_lib_platform.o(i.wifi_init_params)
 <LI><a href="#[5a]">wps_easy_callback</a> from rw_lib_platform.o(i.wps_easy_callback) referenced from rw_lib_platform.o(i.wifi_init_params)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[1d4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1d6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_appdemo_context_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d4]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[d5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[180]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[c8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[b5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[d3]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1de]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1df]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>Api_AggrRecvAddbaReqEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvAddbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>

<P><STRONG><a name="[66]"></a>Api_AggrRecvDelbaReqEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvDelbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
</UL>

<P><STRONG><a name="[68]"></a>Api_BssInfoEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
</UL>

<P><STRONG><a name="[6a]"></a>Api_ConnectEvent</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Api_ConnectEvent &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
</UL>

<P><STRONG><a name="[6d]"></a>Api_ConnectWiFi</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, api_ioctl.o(i.Api_ConnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_static_wep_keys
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[74]"></a>Api_DataTxStart</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, api_txrx.o(i.Api_DataTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_AC2EndpointID
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[7b]"></a>Api_DeInitFinish</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_init.o(i.Api_DeInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[cc]"></a>Api_DeInitStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_init.o(i.Api_DeInitStart))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[7e]"></a>Api_DisconnectEvent</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
</UL>

<P><STRONG><a name="[81]"></a>Api_DisconnectWiFi</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, api_ioctl.o(i.Api_DisconnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_DisconnectWiFi &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[76]"></a>Api_DriverAccessCheck</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, api_ioctl.o(i.Api_DriverAccessCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[83]"></a>Api_GetPmkEvent</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_GetPmkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Api_GetPmkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
</UL>

<P><STRONG><a name="[85]"></a>Api_InitFinish</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_init.o(i.Api_InitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Api_InitFinish &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[86]"></a>Api_InitStart</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api_init.o(i.Api_InitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Api_InitStart &rArr; Driver_ContextInit &rArr; Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[89]"></a>Api_ParseInfoElem</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, api_ioctl.o(i.Api_ParseInfoElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
</UL>

<P><STRONG><a name="[8c]"></a>Api_RSNASuccessEvent</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
</UL>

<P><STRONG><a name="[8e]"></a>Api_ReadyEvent</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, api_wmi_rx.o(i.Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Api_ReadyEvent &rArr; Custom_Api_ReadyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
</UL>

<P><STRONG><a name="[1d2]"></a>Api_RegDomainEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_wmi_rx.o(i.Api_RegDomainEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
</UL>

<P><STRONG><a name="[90]"></a>Api_RxComplete</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, api_txrx.o(i.Api_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[98]"></a>Api_ScanCompleteEvent</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_ScanCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
</UL>

<P><STRONG><a name="[9a]"></a>Api_SockResponseEventRx</STRONG> (Thumb, 840 bytes, Stack size 56 bytes, api_stack_offload.o(i.Api_SockResponseEventRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Api_SockResponseEventRx &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1d3]"></a>Api_TargetStatsEvent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, api_wmi_rx.o(i.Api_TargetStatsEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Api_TargetStatsEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
</UL>

<P><STRONG><a name="[9e]"></a>Api_TkipMicErrorEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_TkipMicErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
</UL>

<P><STRONG><a name="[9f]"></a>Api_TxComplete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_TxComplete &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[a1]"></a>Api_TxGetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Api_TxGetStatus &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[a2]"></a>Api_WMIInitFinish</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, api_init.o(i.Api_WMIInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Api_WMIInitFinish &rArr; send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[a6]"></a>Api_WmiTxStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, api_txrx.o(i.Api_WmiTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[a8]"></a>Api_WpsProfileEvent</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, api_wmi_rx.o(i.Api_WpsProfileEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
</UL>

<P><STRONG><a name="[aa]"></a>Api_accept</STRONG> (Thumb, 666 bytes, Stack size 80 bytes, api_stack_offload.o(i.Api_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Api_accept &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
</UL>

<P><STRONG><a name="[b0]"></a>Api_bind</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Api_bind &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
</UL>

<P><STRONG><a name="[b1]"></a>Api_connect</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Api_connect &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
</UL>

<P><STRONG><a name="[b2]"></a>Api_easyconfigEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
</UL>

<P><STRONG><a name="[b4]"></a>Api_ipconfig</STRONG> (Thumb, 348 bytes, Stack size 192 bytes, api_stack_offload.o(i.Api_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Api_ipconfig &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>

<P><STRONG><a name="[b6]"></a>Api_ipconfig_dhcp_pool</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, api_stack_offload.o(i.Api_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
</UL>

<P><STRONG><a name="[b7]"></a>Api_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, api_stack_offload.o(i.Api_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>

<P><STRONG><a name="[b8]"></a>Api_listen</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, api_stack_offload.o(i.Api_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Api_listen &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
</UL>

<P><STRONG><a name="[b9]"></a>Api_recvfrom</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, cust_api_stack_offload.o(i.Api_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Api_recvfrom &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
</UL>

<P><STRONG><a name="[bc]"></a>Api_select</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, api_stack_offload.o(i.Api_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Api_select &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_queue_empty
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
</UL>

<P><STRONG><a name="[be]"></a>Api_shutdown</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, api_stack_offload.o(i.Api_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Api_shutdown &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
</UL>

<P><STRONG><a name="[c0]"></a>Api_socket</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, api_stack_offload.o(i.Api_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Api_socket &rArr; find_socket_context
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>Bus_InOutDescriptorSet</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutDescriptorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>

<P><STRONG><a name="[e8]"></a>Bus_InOutToken</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[69]"></a>Custom_Api_BssInfoEvent</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cust_api_wmi_rx.o(i.Custom_Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>

<P><STRONG><a name="[6c]"></a>Custom_Api_ConnectEvent</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, cust_api_wmi_rx.o(i.Custom_Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Custom_Api_ConnectEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[7f]"></a>Custom_Api_DisconnectEvent</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Custom_Api_DisconnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[8d]"></a>Custom_Api_RSNASuccessEvent</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Custom_Api_RSNASuccessEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>

<P><STRONG><a name="[8f]"></a>Custom_Api_ReadyEvent</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, cust_api_wmi_rx.o(i.Custom_Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Custom_Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>

<P><STRONG><a name="[ca]"></a>Custom_Api_Shutdown</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cust_api_init.o(i.Custom_Api_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Custom_Api_Shutdown &rArr; Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
</UL>

<P><STRONG><a name="[cf]"></a>Custom_Api_Start</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, cust_api_init.o(i.Custom_Api_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[b3]"></a>Custom_Api_easyconfigEvent</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>

<P><STRONG><a name="[96]"></a>Custom_DeliverFrameToNetworkStack</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cust_api_stack_txrx.o(i.Custom_DeliverFrameToNetworkStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Custom_DeliverFrameToNetworkStack &rArr; custom_receive_tcpip &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[d7]"></a>Custom_Driver_ContextDeInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
</UL>

<P><STRONG><a name="[da]"></a>Custom_Driver_ContextInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_set_rx_pool
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>

<P><STRONG><a name="[75]"></a>Custom_Driver_WaitForCondition</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, cust_driver_main.o(i.Custom_Driver_WaitForCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[d8]"></a>Custom_GetRxRequest</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cust_driver_main.o(i.Custom_GetRxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Custom_GetRxRequest &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_tailroom
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>

<P><STRONG><a name="[e3]"></a>DRIVER_INT_HANDLE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_isr.o(i.DRIVER_INT_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>Driver_BootComm</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, driver_init.o(i.Driver_BootComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[f1]"></a>Driver_CompleteRequest</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, driver_main.o(i.Driver_CompleteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Driver_CompleteRequest &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[7c]"></a>Driver_ContextDeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[87]"></a>Driver_ContextInit</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Driver_ContextInit &rArr; Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[cd]"></a>Driver_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, driver_init.o(i.Driver_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Driver_DeInit &rArr; Hcd_Deinitialize &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DeInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_deinit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[f9]"></a>Driver_DropTxDataPackets</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, driver_main.o(i.Driver_DropTxDataPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Driver_DropTxDataPackets &rArr; Driver_CompleteRequest &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[fc]"></a>Driver_GetTargetInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_init.o(i.Driver_GetTargetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[d2]"></a>Driver_Init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, driver_init.o(i.Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_GetTargetInfo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[df]"></a>Driver_Main</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, driver_main.o(i.Driver_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverLoop
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
</UL>

<P><STRONG><a name="[ee]"></a>Driver_ReadDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_ReadDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Driver_ReadDataDiag &rArr; Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[109]"></a>Driver_ReadRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_ReadRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>

<P><STRONG><a name="[106]"></a>Driver_RecvPacket</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Driver_RecvPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[e0]"></a>Driver_ReportRxBuffStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, driver_main.o(i.Driver_ReportRxBuffStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver_ReportRxBuffStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>

<P><STRONG><a name="[48]"></a>Driver_RxComplete</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Driver_RxComplete &rArr; Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_main.o(i.Driver_RxReady)
</UL>
<P><STRONG><a name="[105]"></a>Driver_RxReady</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, driver_main.o(i.Driver_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Driver_RxReady &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[108]"></a>Driver_SendPacket</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Driver_SendPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[7a]"></a>Driver_SubmitTxRequest</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[a7]"></a>Driver_SubmitTxRequestNoBlock</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequestNoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Driver_SubmitTxRequestNoBlock &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
</UL>

<P><STRONG><a name="[107]"></a>Driver_TxReady</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, driver_main.o(i.Driver_TxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[ef]"></a>Driver_WriteDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_WriteDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[11c]"></a>Driver_WriteRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_WriteRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Deinit
</UL>

<P><STRONG><a name="[11d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
</UL>

<P><STRONG><a name="[12d]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>

<P><STRONG><a name="[145]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_power_up_down
</UL>

<P><STRONG><a name="[e4]"></a>GetDriverContextByInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextByInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>

<P><STRONG><a name="[cb]"></a>GetDriverContextPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[11f]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lib_platform.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_ipcallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[141]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c6]"></a>HTC_ConnectService</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, htc.o(i.HTC_ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[104]"></a>HTC_ProcessCpuInterrupt</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, htc.o(i.HTC_ProcessCpuInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTC_ProcessCpuInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[101]"></a>HTC_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, htc.o(i.HTC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HTC_Start &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[ff]"></a>HTC_WaitTarget</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, htc.o(i.HTC_WaitTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HTC_WaitTarget &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[f6]"></a>HW_DeInit</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hw_api.o(i.HW_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[120]"></a>HW_EnableDisableSPIIRQ</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hw_api.o(i.HW_EnableDisableSPIIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_EnableDisableSPIIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
</UL>

<P><STRONG><a name="[fa]"></a>HW_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_api.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[e5]"></a>HW_InterruptHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_api.o(i.HW_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
</UL>

<P><STRONG><a name="[80]"></a>HW_MsecDelay</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hw_api.o(i.HW_MsecDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_MsecDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[f5]"></a>HW_PowerUpDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hw_api.o(i.HW_PowerUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_PowerUpDown &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>Hcd_ClearCPUInterrupt</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, spi_hcd.o(i.Hcd_ClearCPUInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Hcd_ClearCPUInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[f4]"></a>Hcd_Deinitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_hcd.o(i.Hcd_Deinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hcd_Deinitialize &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[10c]"></a>Hcd_DoPioExternalAccess</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioExternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
</UL>

<P><STRONG><a name="[113]"></a>Hcd_DoPioInternalAccess</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioInternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_DoPioInternalAccess &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[114]"></a>Hcd_GetLookAhead</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_GetLookAhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_GetLookAhead &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[10e]"></a>Hcd_GetMboxAddress</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_GetMboxAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hcd_GetMboxAddress &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[fb]"></a>Hcd_Init</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Hcd_Init &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[11b]"></a>Hcd_ProgramWriteBufferWaterMark</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, spi_hcd.o(i.Hcd_ProgramWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Hcd_ProgramWriteBufferWaterMark &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[11a]"></a>Hcd_RefreshWriteBufferSpace</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_RefreshWriteBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hcd_RefreshWriteBufferSpace &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[10f]"></a>Hcd_Request</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Hcd_Request &rArr; DoDMAOp &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[102]"></a>Hcd_SpiInterrupt</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_SpiInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hcd_SpiInterrupt &rArr; ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[eb]"></a>Hcd_UnmaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_UnmaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
</UL>

<P><STRONG><a name="[119]"></a>Htc_GetCreditCounterUpdate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, htc.o(i.Htc_GetCreditCounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[10d]"></a>Htc_PrepareRecvPacket</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, htc.o(i.Htc_PrepareRecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Htc_PrepareRecvPacket &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[111]"></a>Htc_ProcessRecvHeader</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, htc.o(i.Htc_ProcessRecvHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Htc_ProcessRecvHeader &rArr; Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[117]"></a>Htc_ProcessTxComplete</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, htc.o(i.Htc_ProcessTxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Htc_ProcessTxComplete &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[124]"></a>Htc_ReadCreditCounter</STRONG> (Thumb, 80 bytes, Stack size 104 bytes, htc.o(i.Htc_ReadCreditCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
</UL>

<P><STRONG><a name="[112]"></a>Htc_RxComplete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, htc.o(i.Htc_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Htc_RxComplete &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[115]"></a>Htc_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, htc.o(i.Htc_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Htc_SendPacket &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>Print_USART_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bsp.o(i.Print_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Print_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platformInit
</UL>

<P><STRONG><a name="[130]"></a>RAK_TcpSRecvClients</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tcp_udp.o(i.RAK_TcpSRecvClients))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = RAK_TcpSRecvClients &rArr; accept &rArr; t_accept &rArr; Api_accept &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
</UL>

<P><STRONG><a name="[137]"></a>RAK_TcpServer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tcp_udp.o(i.RAK_TcpServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = RAK_TcpServer &rArr; bind &rArr; t_bind &rArr; Api_bind &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
</UL>

<P><STRONG><a name="[13b]"></a>RAK_TcpServer_EventHandle</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, tcp_udp.o(i.RAK_TcpServer_EventHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = RAK_TcpServer_EventHandle &rArr; send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>

<P><STRONG><a name="[13f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[12a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>

<P><STRONG><a name="[140]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[143]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14b]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Deinit
</UL>

<P><STRONG><a name="[13e]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Deinit
</UL>

<P><STRONG><a name="[14e]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platformInit
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>

<P><STRONG><a name="[19f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[12e]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>

<P><STRONG><a name="[19e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>Util_AC2EndpointID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util.o(i.Util_AC2EndpointID))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[8a]"></a>Util_Freq2ieee</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, util.o(i.Util_Freq2ieee))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[118]"></a>Util_GetEndpoint</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i.Util_GetEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
</UL>

<P><STRONG><a name="[18b]"></a>Util_Ieee2freq</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, util.o(i.Util_Ieee2freq))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[144]"></a>WIFI_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp.o(i.WIFI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WIFI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[146]"></a>WIFI_INT_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bsp.o(i.WIFI_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WIFI_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[14a]"></a>WIFI_SPI_Deinit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp.o(i.WIFI_SPI_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WIFI_SPI_Deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_interface
</UL>

<P><STRONG><a name="[14d]"></a>WIFI_SPI_Init</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, bsp.o(i.WIFI_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WIFI_SPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[14f]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e1]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[135]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_ipcallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[151]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e2]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[1b1]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
</UL>

<P><STRONG><a name="[1e3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ab]"></a>_api_socket</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, api_stack_offload.o(i._api_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSocketBlocked
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
</UL>

<P><STRONG><a name="[176]"></a>_ascii_to_hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rw_lib.o(i._ascii_to_hex))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
</UL>

<P><STRONG><a name="[f2]"></a>a_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[f3]"></a>a_malloc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[d0]"></a>a_malloc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_malloc_init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[177]"></a>a_netbuf_alloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>

<P><STRONG><a name="[dc]"></a>a_netbuf_alloc_raw</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[10a]"></a>a_netbuf_configure</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, cust_driver_netbuf.o(i.a_netbuf_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a_netbuf_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
</UL>

<P><STRONG><a name="[ba]"></a>a_netbuf_dequeue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>

<P><STRONG><a name="[de]"></a>a_netbuf_enqueue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>

<P><STRONG><a name="[97]"></a>a_netbuf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_tx_pool
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[178]"></a>a_netbuf_free_rx_pool</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_free_rx_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[179]"></a>a_netbuf_free_tx_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_free_tx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[c2]"></a>a_netbuf_get_fragment</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_get_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_get_fragment
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>

<P><STRONG><a name="[198]"></a>a_netbuf_headroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_headroom))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[e1]"></a>a_netbuf_init</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[bb]"></a>a_netbuf_pull</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[bf]"></a>a_netbuf_purge_queue</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_purge_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a_netbuf_purge_queue &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
</UL>

<P><STRONG><a name="[116]"></a>a_netbuf_push</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[125]"></a>a_netbuf_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
</UL>

<P><STRONG><a name="[17a]"></a>a_netbuf_put_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a_netbuf_put_data &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[db]"></a>a_netbuf_queue_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[17b]"></a>a_netbuf_reinit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>

<P><STRONG><a name="[dd]"></a>a_netbuf_set_rx_pool</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_set_rx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[e2]"></a>a_netbuf_tailroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_tailroom))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[92]"></a>a_netbuf_to_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[93]"></a>a_netbuf_to_len</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_to_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[127]"></a>a_netbuf_trim</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_trim &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[132]"></a>accept</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rw_lib.o(i.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = accept &rArr; t_accept &rArr; Api_accept &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
</UL>

<P><STRONG><a name="[f8]"></a>aggr_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcv_aggr.o(i.aggr_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[fe]"></a>aggr_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rcv_aggr.o(i.aggr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_init &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[65]"></a>aggr_recv_addba_req_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rcv_aggr.o(i.aggr_recv_addba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>

<P><STRONG><a name="[67]"></a>aggr_recv_delba_req_evt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_recv_delba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>

<P><STRONG><a name="[6b]"></a>aggr_reset_state</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[95]"></a>assert_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rw_lib.o(i.assert_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
</UL>

<P><STRONG><a name="[153]"></a>ath_ioctl_handler</STRONG> (Thumb, 2170 bytes, Stack size 248 bytes, cust_api_ioctl.o(i.ath_ioctl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_power_mode_cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Ieee2freq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_psk
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_scan_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_get_bssid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
</UL>

<P><STRONG><a name="[139]"></a>bind</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bind &rArr; t_bind &rArr; Api_bind &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preload_flash
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_conn
</UL>

<P><STRONG><a name="[ae]"></a>blockForResponse</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, cust_api_stack_offload.o(i.blockForResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>

<P><STRONG><a name="[af]"></a>clearSocketBlocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.clearSocketBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>

<P><STRONG><a name="[9c]"></a>clear_socket_context</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, api_stack_offload.o(i.clear_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clear_socket_context &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
</UL>

<P><STRONG><a name="[136]"></a>close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = close &rArr; shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preload_flash
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_end
</UL>

<P><STRONG><a name="[15f]"></a>connect</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = connect &rArr; t_connect &rArr; Api_connect &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_conn
</UL>

<P><STRONG><a name="[195]"></a>custom_header_alloc</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = custom_header_alloc &rArr; a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
</UL>

<P><STRONG><a name="[196]"></a>custom_header_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = custom_header_free &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
</UL>

<P><STRONG><a name="[170]"></a>custom_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
</UL>

<P><STRONG><a name="[bd]"></a>custom_queue_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.custom_queue_empty))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
</UL>

<P><STRONG><a name="[d6]"></a>custom_receive_tcpip</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, cust_api_stack_txrx.o(i.custom_receive_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = custom_receive_tcpip &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
</UL>

<P><STRONG><a name="[197]"></a>custom_send_tcpip</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, cust_api_stack_txrx.o(i.custom_send_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_headroom
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[199]"></a>custom_socket_context_deinit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = custom_socket_context_deinit &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
</UL>

<P><STRONG><a name="[19a]"></a>custom_socket_context_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = custom_socket_context_init &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
</UL>

<P><STRONG><a name="[d9]"></a>default_native_free_fn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.default_native_free_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = default_native_free_fn &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>

<P><STRONG><a name="[50]"></a>delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rw_lib_platform.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_power_up_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[163]"></a>dnsreq_recv</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rw_dns.o(i.dnsreq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dnsreq_recv &rArr; recvfrom &rArr; t_recvfrom &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_recv
</UL>

<P><STRONG><a name="[160]"></a>dnsreq_send</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, rw_dns.o(i.dnsreq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = dnsreq_send &rArr; sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_conn
</UL>

<P><STRONG><a name="[9b]"></a>find_socket_context</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, api_stack_offload.o(i.find_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[51]"></a>get_stamp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lib_platform.o(i.get_stamp))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[1a0]"></a>host_platformInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.host_platformInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = host_platformInit &rArr; Print_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[ac]"></a>isSocketBlocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.isSocketBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>

<P><STRONG><a name="[13a]"></a>listen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rw_lib.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = listen &rArr; t_listen &rArr; Api_listen &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, tcpudp_test.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = main &rArr; rw_sysDriverLoop &rArr; _loop_connect &rArr; _dns_conn &rArr; dnsreq_send &rArr; sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverLoop
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_appdemo_context_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1a3]"></a>platform_init</STRONG> (Thumb, 210 bytes, Stack size 128 bytes, tcpudp_test.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = platform_init &rArr; rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_params
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platformInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>pvPortMalloc</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lib_mem.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[13c]"></a>recv</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, rw_lib.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = recv &rArr; t_recvfrom &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
</UL>

<P><STRONG><a name="[19b]"></a>recvfrom</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, rw_lib.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = recvfrom &rArr; t_recvfrom &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsreq_recv
</UL>

<P><STRONG><a name="[1a4]"></a>rw_appdemo_context_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ap_sta.o(i.rw_appdemo_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_appdemo_context_init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>rw_getLibVersion</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rw_lib.o(i.rw_getLibVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = rw_getLibVersion &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1ad]"></a>rw_getMacAddr</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i.rw_getMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rw_getMacAddr &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1b2]"></a>rw_ipConfig</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, rw_lib.o(i.rw_ipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rw_ipConfig &rArr; t_ipconfig &rArr; Api_ipconfig &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[1a8]"></a>rw_network_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ap_sta.o(i.rw_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
</UL>

<P><STRONG><a name="[1a5]"></a>rw_network_startSTA</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ap_sta.o(i.rw_network_startSTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>rw_sysDriverInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1a6]"></a>rw_sysDriverLoop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rw_lib.o(i.rw_sysDriverLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rw_sysDriverLoop &rArr; _loop_connect &rArr; _dns_conn &rArr; dnsreq_send &rArr; sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>rw_sysDriverReset</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rw_sysDriverReset &rArr; Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>rw_sysSleep</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rw_sysSleep &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
</UL>

<P><STRONG><a name="[1b4]"></a>rw_wlanConnect</STRONG> (Thumb, 596 bytes, Stack size 48 bytes, rw_lib.o(i.rw_wlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_psk
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[167]"></a>rw_wlanGetScanInfo</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, rw_lib.o(i.rw_wlanGetScanInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = rw_wlanGetScanInfo &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[131]"></a>select</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rw_lib.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = select &rArr; t_select &rArr; Api_select &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_recv
</UL>

<P><STRONG><a name="[13d]"></a>send</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, rw_lib.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
</UL>

<P><STRONG><a name="[a5]"></a>send_stack_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, api_stack_offload.o(i.send_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[19d]"></a>sendto</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, rw_lib.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsreq_send
</UL>

<P><STRONG><a name="[193]"></a>shutdown</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rw_lib.o(i.shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[138]"></a>socket</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rw_lib.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = socket &rArr; t_socket &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preload_flash
</UL>

<P><STRONG><a name="[7d]"></a>socket_context_deinit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = socket_context_deinit &rArr; custom_socket_context_deinit &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[88]"></a>socket_context_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = socket_context_init &rArr; custom_header_alloc &rArr; a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[17d]"></a>t_accept</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = t_accept &rArr; Api_accept &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[18f]"></a>t_bind</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = t_bind &rArr; Api_bind &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[194]"></a>t_connect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = t_connect &rArr; Api_connect &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[16a]"></a>t_ipconfig</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cust_api_stack_offload.o(i.t_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = t_ipconfig &rArr; Api_ipconfig &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[1b3]"></a>t_ipconfig_dhcp_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = t_ipconfig_dhcp_pool &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[1a2]"></a>t_listen</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = t_listen &rArr; Api_listen &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[1b0]"></a>t_recvfrom</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, cust_api_stack_offload.o(i.t_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = t_recvfrom &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[1b9]"></a>t_select</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = t_select &rArr; Api_select &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[1ba]"></a>t_send</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, cust_api_stack_offload.o(i.t_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[1bb]"></a>t_sendto</STRONG> (Thumb, 476 bytes, Stack size 184 bytes, cust_api_stack_offload.o(i.t_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
</UL>

<P><STRONG><a name="[1bc]"></a>t_shutdown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.t_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = t_shutdown &rArr; Api_shutdown &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[1bd]"></a>t_socket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = t_socket &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[a0]"></a>txpkt_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.txpkt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
</UL>

<P><STRONG><a name="[9d]"></a>unblock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.unblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[53]"></a>vPortFree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib_mem.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortFree &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[1aa]"></a>wifi_init_params</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rw_lib_platform.o(i.wifi_init_params))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[a4]"></a>wmi_allow_aggr_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_allow_aggr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_allow_aggr_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[73]"></a>wmi_ap_profile_commit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_profile_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_ap_profile_commit &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[18d]"></a>wmi_ap_set_param</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_ap_set_param &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[99]"></a>wmi_bssfilter_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssfilter_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>

<P><STRONG><a name="[1bf]"></a>wmi_cmd_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wmi.o(i.wmi_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>

<P><STRONG><a name="[70]"></a>wmi_connect_cmd</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wmi_connect_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[91]"></a>wmi_control_rx</STRONG> (Thumb, 636 bytes, Stack size 64 bytes, wmi.o(i.wmi_control_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[77]"></a>wmi_data_hdr_add</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, wmi.o(i.wmi_data_hdr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[94]"></a>wmi_data_hdr_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wmi.o(i.wmi_data_hdr_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wmi_data_hdr_remove &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[82]"></a>wmi_disconnect_cmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wmi.o(i.wmi_disconnect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>

<P><STRONG><a name="[185]"></a>wmi_get_pmk_cmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_get_pmk_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[18c]"></a>wmi_get_power_mode_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wmi.o(i.wmi_get_power_mode_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[183]"></a>wmi_get_stats_cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_stats_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_get_stats_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[78]"></a>wmi_implicit_create_pstream</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, wmi.o(i.wmi_implicit_create_pstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wmi_implicit_create_pstream &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[fd]"></a>wmi_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wmi.o(i.wmi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wmi_init &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[17f]"></a>wmi_listeninterval_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_listeninterval_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_listeninterval_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1ce]"></a>wmi_meta_add</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, wmi.o(i.wmi_meta_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
</UL>

<P><STRONG><a name="[17e]"></a>wmi_pmparams_cmd</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, wmi.o(i.wmi_pmparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wmi_pmparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[a9]"></a>wmi_powermode_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_powermode_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_powermode_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>

<P><STRONG><a name="[189]"></a>wmi_probedSsid_cmd</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wmi.o(i.wmi_probedSsid_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_probedSsid_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[18e]"></a>wmi_promiscuous_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_promiscuous_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_promiscuous_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1d1]"></a>wmi_qos_state_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wmi.o(i.wmi_qos_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
</UL>

<P><STRONG><a name="[6f]"></a>wmi_scanparams_cmd</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, wmi.o(i.wmi_scanparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[181]"></a>wmi_set_channelParams_cmd</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wmi.o(i.wmi_set_channelParams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wmi_set_channelParams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[187]"></a>wmi_set_channel_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_channel_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_set_channel_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[c7]"></a>wmi_set_control_ep</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wmi.o(i.wmi_set_control_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wmi_set_control_ep &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[182]"></a>wmi_set_ht_cap_cmd</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_ht_cap_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_set_ht_cap_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[188]"></a>wmi_set_passphrase_cmd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_passphrase_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_set_passphrase_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[184]"></a>wmi_set_pmk_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_set_pmk_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[f7]"></a>wmi_shutdown</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wmi.o(i.wmi_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_shutdown &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[ad]"></a>wmi_socket_cmd</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wmi.o(i.wmi_socket_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_socket_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_api_socket
</UL>

<P><STRONG><a name="[18a]"></a>wmi_startscan_cmd</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, wmi.o(i.wmi_startscan_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wmi_startscan_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[a3]"></a>wmi_storerecall_configure_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_storerecall_configure_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_storerecall_configure_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[186]"></a>wmi_wps_start_cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_start_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_wps_start_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ae]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lib_mem.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1af]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lib_mem.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[190]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ap_sta.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[133]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp_udp.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpServer_EventHandle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpSRecvClients
</UL>

<P><STRONG><a name="[191]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcpudp_test.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>SetSysClock</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4d]"></a>_deinit_interface</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_lib_platform.o(i._deinit_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _deinit_interface &rArr; WIFI_SPI_Deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[52]"></a>_ext_interrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rw_lib_platform.o(i._ext_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[4c]"></a>_init_interface</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rw_lib_platform.o(i._init_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _init_interface &rArr; WIFI_SPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INT_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[4e]"></a>_power_up_down</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rw_lib_platform.o(i._power_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _power_up_down &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[4f]"></a>_spi_io_buffer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rw_lib_platform.o(i._spi_io_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _spi_io_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[192]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rw_lib_platform.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_ipcallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[56]"></a>connect_callback</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, rw_lib_platform.o(i.connect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = connect_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[55]"></a>customer_assert</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rw_lib_platform.o(i.customer_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = customer_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[59]"></a>dns_ipcallback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rw_lib_platform.o(i.dns_ipcallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dns_ipcallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[58]"></a>ip_callback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rw_lib_platform.o(i.ip_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[57]"></a>scan_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rw_lib_platform.o(i.scan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scan_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[5a]"></a>wps_easy_callback</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, rw_lib_platform.o(i.wps_easy_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_easy_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[152]"></a>_ath_commit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rw_lib.o(i._ath_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ath_commit &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[154]"></a>_ath_get_bssid</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ath_get_bssid &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[155]"></a>_ath_set_bssid</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ath_set_bssid &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[156]"></a>_ath_set_cipher</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ath_set_cipher &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[157]"></a>_ath_set_essid</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _ath_set_essid &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[158]"></a>_ath_set_mode</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _ath_set_mode &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[159]"></a>_ath_set_passphrase</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_passphrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _ath_set_passphrase &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[15a]"></a>_ath_set_pmk</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ath_set_pmk &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[15b]"></a>_ath_set_sec_type</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_sec_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _ath_set_sec_type &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[17c]"></a>_check_fd_invaild</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rw_lib.o(i._check_fd_invaild))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[15c]"></a>_check_sys_params</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rw_lib.o(i._check_sys_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _check_sys_params &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[15d]"></a>_clean_filename</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rw_lib.o(i._clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>

<P><STRONG><a name="[15e]"></a>_dns_conn</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, rw_lib.o(i._dns_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = _dns_conn &rArr; dnsreq_send &rArr; sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsreq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[161]"></a>_dns_end</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rw_lib.o(i._dns_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _dns_end &rArr; close &rArr; shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[162]"></a>_dns_recv</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rw_lib.o(i._dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = _dns_recv &rArr; dnsreq_recv &rArr; recvfrom &rArr; t_recvfrom &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsreq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[164]"></a>_get_scan_info</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rw_lib.o(i._get_scan_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _get_scan_info &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[165]"></a>_loop_connect</STRONG> (Thumb, 940 bytes, Stack size 80 bytes, rw_lib.o(i._loop_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = _loop_connect &rArr; _dns_conn &rArr; dnsreq_send &rArr; sendto &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preload_flash
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_scan_info
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_end
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_conn
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_get_bssid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverLoop
</UL>

<P><STRONG><a name="[169]"></a>_preload_flash</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rw_lib.o(i._preload_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = _preload_flash &rArr; bind &rArr; t_bind &rArr; Api_bind &rArr; _api_socket &rArr; blockForResponse &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[16d]"></a>_set_PowerParam</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, rw_lib.o(i._set_PowerParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[16f]"></a>_set_TcpBackoffRetry</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rw_lib.o(i._set_TcpBackoffRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _set_TcpBackoffRetry &rArr; custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[171]"></a>_set_ap_params</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rw_lib.o(i._set_ap_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
</UL>

<P><STRONG><a name="[168]"></a>_set_channel</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rw_lib.o(i._set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _set_channel &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[172]"></a>_set_ctycode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rw_lib.o(i._set_ctycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = _set_ctycode &rArr; _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[173]"></a>_set_power</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, rw_lib.o(i._set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _set_power &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[174]"></a>_set_psk</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._set_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _set_psk &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[166]"></a>_set_scan</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rw_lib.o(i._set_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = _set_scan &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_loop_connect
</UL>

<P><STRONG><a name="[175]"></a>_set_str_pmk</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, rw_lib.o(i._set_str_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ascii_to_hex
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[19c]"></a>newdata</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, rw_dns.o(i.newdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = newdata
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsreq_recv
</UL>

<P><STRONG><a name="[1a9]"></a>parse_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rw_dns.o(i.parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[ce]"></a>ClearDriverContextPtr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cust_api_init.o(i.ClearDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[d1]"></a>SetDriverContextPtr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_api_init.o(i.SetDriverContextPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDriverContextPtr &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[6e]"></a>Install_static_wep_keys</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_ioctl.o(i.Install_static_wep_keys))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[1b7]"></a>rsn_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.rsn_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[1b5]"></a>rsn_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.rsn_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsn_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[8b]"></a>security_ie_parse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, api_ioctl.o(i.security_ie_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_parse
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_parse
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_cipher_parse
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_auth_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
</UL>

<P><STRONG><a name="[1b8]"></a>wpa_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.wpa_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[1b6]"></a>wpa_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.wpa_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[46]"></a>query_credit_deficit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, api_txrx.o(i.query_credit_deficit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = query_credit_deficit &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_txrx.o(i.Api_TxGetStatus)
</UL>
<P><STRONG><a name="[10b]"></a>Driver_SetAddressWindowRegister</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, driver_diag.o(i.Driver_SetAddressWindowRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>

<P><STRONG><a name="[c5]"></a>ConnectService</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, driver_init.o(i.ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[f0]"></a>Driver_TargReset</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, driver_init.o(i.Driver_TargReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
</UL>

<P><STRONG><a name="[100]"></a>SetupServices</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, driver_init.o(i.SetupServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetupServices &rArr; ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[110]"></a>Driver_PostProcessRequest</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver_txrx.o(i.Driver_PostProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[49]"></a>Driver_TxComplete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, driver_txrx.o(i.Driver_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Driver_TxComplete &rArr; Api_TxComplete &rArr; a_netbuf_free &rArr; txpkt_free &rArr; a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver_txrx.o(i.Driver_SubmitTxRequest)
<LI> driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
</UL>
<P><STRONG><a name="[c3]"></a>ConfigureByteSwap</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_hcd.o(i.ConfigureByteSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConfigureByteSwap &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[e6]"></a>DoDMAOp</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, spi_hcd.o(i.DoDMAOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DoDMAOp &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[ec]"></a>DoPioReadInternal</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioReadInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[c4]"></a>DoPioWriteInternal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioWriteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[ea]"></a>EnableDisableSPIIRQHwDetect</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spi_hcd.o(i.EnableDisableSPIIRQHwDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EnableDisableSPIIRQHwDetect &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
</UL>

<P><STRONG><a name="[122]"></a>HandleExternalReadDone</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.HandleExternalReadDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[e9]"></a>Hcd_TransferData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[e7]"></a>MaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.MaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[123]"></a>ResetWriteBufferWaterMark</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_hcd.o(i.ResetWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
</UL>

<P><STRONG><a name="[121]"></a>Htc_DistributeCredits</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, htc.o(i.Htc_DistributeCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
</UL>

<P><STRONG><a name="[126]"></a>Htc_ProcessCreditRpt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, htc.o(i.Htc_ProcessCreditRpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
</UL>

<P><STRONG><a name="[128]"></a>Htc_ProcessTrailer</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, htc.o(i.Htc_ProcessTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[1be]"></a>wmi_addba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_addba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_addba_req_event_rx &rArr; Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c0]"></a>wmi_bssInfo_event_rx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssInfo_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wmi_bssInfo_event_rx &rArr; Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c1]"></a>wmi_connect_event_rx</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wmi_connect_event_rx &rArr; Api_ConnectEvent &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1cb]"></a>wmi_delba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_delba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wmi_delba_req_event_rx &rArr; Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1d0]"></a>wmi_determine_userPriority</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wmi.o(i.wmi_determine_userPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>

<P><STRONG><a name="[1c3]"></a>wmi_disconnect_event_rx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wmi.o(i.wmi_disconnect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1cd]"></a>wmi_easyconfig_event_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_easyconfig_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = wmi_easyconfig_event_rx &rArr; Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c7]"></a>wmi_errorEvent_rx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wmi.o(i.wmi_errorEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wmi_errorEvent_rx &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c9]"></a>wmi_get_pmk_event_rx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_get_pmk_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wmi_get_pmk_event_rx &rArr; Api_GetPmkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c2]"></a>wmi_ready_event_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wmi.o(i.wmi_ready_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wmi_ready_event_rx &rArr; Api_ReadyEvent &rArr; Custom_Api_ReadyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c5]"></a>wmi_regDomain_event_rx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wmi.o(i.wmi_regDomain_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_regDomain_event_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RegDomainEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c4]"></a>wmi_rsna_4way_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_rsna_4way_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wmi_rsna_4way_rx &rArr; Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c6]"></a>wmi_scanComplete_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wmi.o(i.wmi_scanComplete_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wmi_scanComplete_rx &rArr; Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1cf]"></a>wmi_simple_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wmi.o(i.wmi_simple_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>

<P><STRONG><a name="[1c8]"></a>wmi_statsEvent_rx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wmi.o(i.wmi_statsEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_statsEvent_rx &rArr; Api_TargetStatsEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1cc]"></a>wmi_tkip_micerr_event_rx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wmi.o(i.wmi_tkip_micerr_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wmi_tkip_micerr_event_rx &rArr; Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1ca]"></a>wmi_wps_profile_event_rx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_profile_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wmi_wps_profile_event_rx &rArr; Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[47]"></a>Custom_FreeRxRequest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_main.o(i.Custom_FreeRxRequest))
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_GetRxRequest)
</UL>
<P><STRONG><a name="[c9]"></a>fill_scan_info</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, cust_api_wmi_rx.o(i.fill_scan_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[150]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[16c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
